<?php

namespace Drupal\ip_reports_request\Plugin\WebformHandler;

use Complex\Exception;
use Drupal\webform\Entity\Webform;
use Drupal\webform\Entity\WebformSubmission;
use Drupal\webform\Plugin\WebformHandlerBase;
use Drupal\ip_reports_request\Controller\IpReportRequestController;
use Drupal\ip_reports_request\Controller\IpReportRequestCalculationServiceController;
use Drupal\ip_webform_api\Controller\CalculationServiceController;

/**
 * Form submission handler.
 *
 * @WebformHandler(
 *   id = "ip_reports_on_confirmation_page",
 *   label = @Translation("Reports on Confirmation Page"),
 *   category = @Translation("Form Handler"),
 *   description = @Translation("Show reports links on confirmation page for Anonymous users."),
 *   cardinality = \Drupal\webform\Plugin\WebformHandlerInterface::CARDINALITY_SINGLE,
 *   results = \Drupal\webform\Plugin\WebformHandlerInterface::RESULTS_PROCESSED,
 * )
 */
class AnonymousConfirmationPageResults extends WebformHandlerBase {

  /**
   * {@inheritdoc}
   */
  public function defaultConfiguration() {
    return [];
  }

  public function preprocessConfirmation(array &$variables) {
    $variables['#cache']['max-age'] = 0;

    parent::preprocessConfirmation($variables); // TODO: Change the autogenerated stub

    if (\Drupal::currentUser()->isAnonymous()) {
      if ((isset($variables['webform']) && $variables['webform'] instanceof Webform) && (isset($variables['webform_submission']) && $variables['webform_submission'] instanceof WebformSubmission)) {
        $reports_html = IpReportRequestController::getAnonymousReprots($variables['webform']->id(), $variables['webform_submission']->id());

        if (!$reports_html) {
          // send submission immediately for anonymous
          $calculationService = new CalculationServiceController();
          $create_submission_response           = $calculationService->createSubmission($variables['webform']->id(), $variables['webform_submission']->id());

          if ($create_submission_response !== FALSE) {
            if (isset($create_submission_response['success']) && $create_submission_response['success']) {
              if (isset($create_submission_response['submission']['status']) && $create_submission_response['submission']['status'] != 'completed') {
                \Drupal::logger('ip_reports_request')
                       ->error(t('Submission @sid not sent with force mode for anonymous user. Status: @status, Status description: @status_description', [
                         '@sid'                => $variables['webform_submission']->id(),
                         '@status'             => $create_submission_response['submission']['status'],
                         '@status_description' => $create_submission_response['submission']['status_description'],
                       ]));
                return TRUE;
              }
            }
            else {
              \Drupal::logger('ip_reports_request')
                     ->error(t('Submission not @sid sent with force mode for anonymous user and returned with bad status.', ['@sid' => $variables['webform_submission']->id()]));
              return TRUE;
            }
          }

          \Drupal::logger('ip_reports_request')
                 ->info(t('Submission @sid sent with force mode for anonymous user.', ['@sid' => $variables['webform_submission']->id()]));

          // create report immediately for anonymous
          $values = [
            'type'                 => 'report',
            'field_report_webform' => $variables['webform']->id(),
          ];

          $report_structure_nodes = \Drupal::entityTypeManager()
                                           ->getStorage('node')
                                           ->loadByProperties($values);

          if (is_array($report_structure_nodes) && count($report_structure_nodes) == 0) {
            \Drupal::logger('ip_reports_request')
              ->info(t('Not found reports for webform @wid.', ['@wid' => $variables['webform']->id()]));
            return TRUE;
          }

          $calculationService = new IpReportRequestCalculationServiceController();
          $site_id            = $calculationService->getSiteID();
          $base_url           = $calculationService->getBaseUrl();

          $conditions = [
            'organisation_id' => NULL,
            'submission_id'   => $variables['webform_submission']->id(),
          ];

          $reports_html = '';

          foreach ($report_structure_nodes as $report_structure) {
            $show_report = $report_structure->get('field_report_settings')->value == 'show';

            if (!$show_report) {
              continue;
            }

            $create_report_response = $calculationService->createReport($report_structure->id(), $conditions, TRUE);

            if ($create_report_response !== FALSE) {
              if (isset($create_report_response['success']) && $create_report_response['success']) {
                if (isset($create_report_response['report']['status']) && $create_report_response['report']['status'] != 'completed') {
                  \Drupal::logger('ip_reports_request')
                         ->error(t('Report not sent with force mode for anonymous user. Submission: @sid,  Status: @status, Status description: @status_description', [
                           '@sid'                => $variables['webform_submission']->id(),
                           '@status'             => $create_report_response['submission']['status'],
                           '@status_description' => $create_report_response['submission']['status_description'],
                         ]));
                  return TRUE;
                }
              }
              else {
                \Drupal::logger('ip_reports_request')
                       ->error(t('Report not sent with force mode for anonymous user. Submission: @sid.', ['@sid' => $variables['webform_submission']->id()]));
                return TRUE;
              }

              \Drupal::logger('ip_reports_request')
                     ->info(t('Report sent with force mode for anonymous user. Submission: @sid.', ['@sid' => $variables['webform_submission']->id()]));

              $results = IpReportRequestController::buildResults($report_structure->id(), $create_report_response['report']['id'], $site_id);

              $can_download_pdf  = $report_structure->get('field_download_pdf')->value == 'allow';
              $can_download_docx = $report_structure->get('field_download_docx')->value == 'allow';

              $show_print_btn = (bool) $report_structure->get('field_print_button')->value;

              \Drupal::logger('ip_reports_request')
                     ->info(t('Can Download PDF: @perm.', ['@perm' => $can_download_pdf]));

              \Drupal::logger('ip_reports_request')
                     ->info(t('Can Download DOCX: @perm.', ['@perm' => $can_download_docx]));

              \Drupal::logger('ip_reports_request')
                     ->info(t('Show HTML: @perm.', ['@perm' => $show_print_btn]));

              //@TODO: move base url to common method
              if (is_array($results) && count($results)) {

                $reports_structure_html = '';

                if (isset($results[IpReportRequestController::REPORT_HTML])) {
                  $url = $base_url . $results[IpReportRequestController::REPORT_HTML];

                  $reports_structure_html .= ' ' . sprintf('<a target="_blank" href="%s">%s</a>', $url, IpReportRequestController::getResultsLabel(IpReportRequestController::REPORT_HTML));
                }

                if (isset($results[IpReportRequestController::REPORT_PDF]) && $can_download_pdf) {
                  $url = $base_url . $results[IpReportRequestController::REPORT_PDF];

                  $reports_structure_html .= ' ' . sprintf('<a href="%s">%s</a>', $url, IpReportRequestController::getResultsLabel(IpReportRequestController::REPORT_PDF));
                }

                if (isset($results[IpReportRequestController::REPORT_DOCX]) && $can_download_docx) {
                  $url = $base_url . $results[IpReportRequestController::REPORT_DOCX];

                  $reports_structure_html .= ' ' . sprintf('<a href="%s">%s</a>', $url, IpReportRequestController::getResultsLabel(IpReportRequestController::REPORT_DOCX));
                }

                if ($show_print_btn && isset($results[IpReportRequestController::REPORT_PDF])) {
                  $url = $base_url . $results[IpReportRequestController::REPORT_PDF] . '&download=0';

                  $reports_structure_html .= ' ' . sprintf('<a href="%s">%s</a>', $url, IpReportRequestController::getResultsLabel(IpReportRequestController::REPORT_PRINT)) . '<br/>';
                }

                if ($reports_structure_html) {
                  $reports_html .= sprintf('<h6>%s: %s</h6>%s', t('Report'), $report_structure->getTitle(), $reports_structure_html);
                }
              }
            }
            else {
              \Drupal::logger('ip_reports_request')
                     ->error(t('Reports not sent with force mode for anonymous user.'));
              return TRUE;
            }
          }

          IpReportRequestController::setAnonymousReprots($variables['webform']->id(), $variables['webform_submission']->id(), $reports_html);
        }

        if (isset($variables['message']['#markup'])) {
          $variables['message']['#markup'] .= '<br>' . '<p>' . $reports_html . '<p>';
        }
        else {
          $variables['progress'] =
            [
              '#type'   => 'markup',
              '#markup' => $reports_html,
            ];
        }
      }
      else {
        \Drupal::logger('ip_reports_request')
          ->info(t('Skip force generation without all instance.'));
      }
    }
  }
}
